datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
model Pizza {
  id          String   @id @default(uuid())
  name        String
  description String
  category    String
  smallPrice  Int
  mediumPrice Int
  largePrice  Int
  baseId      String
  base        Base    @relation(fields: [baseId], references: [id])
  cheeseId    String?
  cheese      Cheese? @relation(fields: [cheeseId], references: [id])
  sauceId     String?
  sauce       Sauce?  @relation(fields: [sauceId], references: [id])
  veggies     Veggie[]
  stock       Int      @default(50)
  imageSource String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Base {
  id               String  @id @default(uuid())
  name             String  @unique
  price            Int
  availableQuantity Int
  pizzas          Pizza[]
}

model Cheese {
  id               String  @id @default(uuid())
  name             String  @unique
  price            Int
  availableQuantity Int
  pizzas          Pizza[]
}

model Sauce {
  id               String  @id @default(uuid())
  name             String  @unique
  price            Int
  availableQuantity Int
  pizzas          Pizza[]
}

model Veggie {
  id               String  @id @default(uuid())
  name             String  @unique
  price            Int
  availableQuantity Int
  pizzas          Pizza[]
}
